#Two Sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for i2 in range(len(nums)):
                if i != i2:
                    if nums[i] + nums[i2] == target:
                        return [i, i2] 
#Palindrome?
class Solution:
    def isPalindrome(self, x: int) -> bool:
        string = str(x)
        if string == string[::-1]:
            return True
        return False

#Palindrome in Range
def reverse_integer(num):
	If num < 0:
		String = str(abs(num)
		new_string = string[::-1]  ⇒ O(n)
		if int(new_string) < 2**31:
			Return -int(new_string)
else:
		String = str(num)
		new_string = string[::-1] ⇒ O(n)
		if int(new_string) < 2**31 - 1: 
			Return int(new_string)
	return 0

#Palindrome better solution 
def isPalindrome(self, x):
        def reverse_number():
            result = 0
            remainder = x
            while remainder != 0: 123, 12, 1, 0 —> O(N) where n = # digit in the number
                result *= 10 = 0, 30, 320
                result += remainder % 10 => 3, 32, 321
                remainder //= 10 => 12, 1, 0
            return result => 321
        return False if x < 0 else x == reverse_number()

#Longest Common Prefix
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return ""
        test_string = strs[0]
        i = 1
        for strs in strs[1:]:
            while strs[:len(test_string)] != test_string:
                test_string = test_string[:-1]
                if not prefix:
                    return ""
        return test_string

#Find Index
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)
#Need to understand the function find()



